class SmartAI
    {
        public Move GetMove(Boards boards, int searchDepth)
        {
            if (boards.moves.Count == 0) { throw (null); }
            int best = -1000000, bestIndex = -1;
            Stopwatch stopwatch = new Stopwatch();
            stopwatch.Start();
            for(int i = 0; i < boards.moves.Count; ++i)
            {
                int score = -NegaMax(CopyAndMove(boards, boards.moves[i]), searchDepth, -1000000, 1000000);
                if (score > best) { best = score; bestIndex = i; }
            }
            stopwatch.Stop();
            if (stopwatch.ElapsedMilliseconds < 500) { System.Threading.Thread.Sleep(250); }
            return boards.moves[bestIndex];
        }

        private int NegaMax(Boards boards, int depth, int alpha, int beta)
        {
            int bigBoardRating = boards.GetWinner(9);
            if (bigBoardRating == Game.DRAW) { return 0; }
            if (bigBoardRating == Game.X) { return 100000 * (boards.turn ? -1 : 1); }
            if (bigBoardRating == Game.O) { return -100000 * (boards.turn ? -1 : 1); }
            if (depth == 0) { return Eval(boards) * (boards.turn ? -1 : 1); }
            int best = -1000000;
            foreach(Move m in boards.moves)
            {
                int score = -NegaMax(CopyAndMove(boards, m), depth - 1, -beta, - alpha);
                if (score > best) { best = score; }
                if (best > alpha) { alpha = best; }
                if (alpha >= beta) { return alpha; }
            }
            return best;
        }

        private Boards CopyAndMove(Boards boards, Move move)
        {
            Boards newBoards = new Boards(boards);
            newBoards.SetTile_Small(move);
            int boardWinner = newBoards.GetWinner(move.board);
            if (boardWinner != Game.EMPTY)
            {
                newBoards.SetTile_Big(move.board);
            }
            newBoards.lastmove = newBoards.GetWinner(move.tile) == Game.EMPTY ? move.tile : -1;
            newBoards.FillMoves();
            return newBoards;
        }

        private int Eval(Boards boards)
        {
            int rating = 0;
            for(int i = 0; i < 9; ++i)
            {
                rating += (int)HashTables.boardRatings[boards.smallboards[i]];
            }
            return rating + ((int)HashTables.boardRatings[boards.smallboards[9]] * 10);
        }
    }

class Pair
    {
        public Boards boards;
        public Move move;
        public Pair(Boards b, Move m)
        {
            boards = b;
            move = m;
        }
    }

    class SmartAI
    {
        public Move GetMove(Boards boards, int searchDepth)
        {
            if (boards.moves.Count == 0) { throw (null); }
            int best = -1000000, bestIndex = -1;
            Stopwatch stopwatch = new Stopwatch();
            stopwatch.Start();
            List<Pair> boardsList = new List<Pair>();
            foreach(Move m in boards.moves)
            {
                boardsList.Add(new Pair(CopyAndMove(boards, m), m));
            }
            boardsList.Sort(delegate(Pair x, Pair y) { return Eval(x.boards).CompareTo(Eval(y.boards)); });
            for(int i = 0; i < boardsList.Count; ++i)
            {
                int score = -NegaMax(boardsList[boards.turn ? i : boardsList.Count - i - 1].boards, searchDepth, -1000000, 1000000);
                if (score > best) { best = score; bestIndex = boards.turn ? i : boardsList.Count - i - 1; }
            }
            stopwatch.Stop();
            if (stopwatch.ElapsedMilliseconds < 500) { System.Threading.Thread.Sleep(250); }
            return boardsList[bestIndex].move;
        }

        private int NegaMax(Boards boards, int depth, int alpha, int beta)
        {
            int bigBoardRating = boards.GetWinner(9);
            if (bigBoardRating == Game.DRAW) { return 0; }
            if (bigBoardRating == Game.X) { return 100000 * (boards.turn ? -1 : 1); }
            if (bigBoardRating == Game.O) { return -100000 * (boards.turn ? -1 : 1); }
            if (depth == 0) { return Eval(boards) * (boards.turn ? -1 : 1); }
            int best = -1000000;
            List<Boards> boardsList = new List<Boards>();
            foreach (Move m in boards.moves)
            {
                boardsList.Add(CopyAndMove(boards, m));
            }
            boardsList.Sort(delegate(Boards x, Boards y) { return Eval(x).CompareTo(Eval(y)); });
            for (int i = 0; i < boardsList.Count; ++i)
            {
                int score = -NegaMax(boardsList[boards.turn ? i : boardsList.Count - i - 1], depth - 1, -beta, -alpha);
                if (score > best) { best = score; }
                if (best > alpha) { alpha = best; }
                if (alpha >= beta) { return alpha; }
            }
            return best;
        }

        private Boards CopyAndMove(Boards boards, Move move)
        {
            Boards newBoards = new Boards(boards);
            newBoards.SetTile_Small(move);
            int boardWinner = newBoards.GetWinner(move.board);
            if (boardWinner != Game.EMPTY)
            {
                newBoards.SetTile_Big(move.board);
            }
            newBoards.lastmove = newBoards.GetWinner(move.tile) == Game.EMPTY ? move.tile : -1;
            newBoards.FillMoves();
            return newBoards;
        }

        private int Eval(Boards boards)
        {
            int rating = 0;
            for(int i = 0; i < 9; ++i)
            {
                rating += (int)HashTables.boardRatings[boards.smallboards[i]];
            }
            return rating + ((int)HashTables.boardRatings[boards.smallboards[9]] * 10);
        }
    }